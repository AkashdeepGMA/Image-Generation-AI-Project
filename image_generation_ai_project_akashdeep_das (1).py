# -*- coding: utf-8 -*-
"""Image Generation AI Project - Akashdeep Das.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1D0h8KCG9Ua5p7hDCGBmKNmfXLNln35G6
"""

!pip install --upgrade diffusers transformers scipy
!pip install openai

import requests
import re
from PIL import Image
from io import BytesIO
import uuid
import datetime
import csv
from google.colab import drive
import os
import torch

# TODO
# Mount Google Drive

from diffusers import StableDiffusionPipeline
from diffusers import DiffusionPipeline

model_id = "runwayml/stable-diffusion-v1-5"
pipe = StableDiffusionPipeline.from_pretrained(model_id, torch_dtype=torch.float16)
pipe = pipe.to("cuda")

# TODO

apikey="Just input your-OpenAI API Key"

from openai import OpenAI
client = OpenAI(api_key=apikey)

FOOD_TEMPLATE_STRING_START = 'A serving of'

FOOD = [
    "Tandoori chicken with mint chutney",
    "Pad Thai topped with crushed peanuts",
    "juicy cheeseburger with a side of fries",
    "sushi platter with assorted nigiri and rolls",
    "Neapolitan pizza with fresh basil",
    "falafel wrap with tahini sauce",
    "beef empanada with salsa",
    "spaghetti carbonara with a sprinkle of parmesan",
    "French onion soup with melted cheese",
    "Peking duck with hoisin sauce",
    "bibimbap with mixed vegetables",
    "fish and chips with tartar sauce",
    "chicken biryani garnished with fried onions",
    "vegetable lasagna with béchamel sauce",
    "ceviche with avocado and cilantro"
]

BEVERAGES = [
    "craft beer on tap",
    "handcrafted cocktail with fresh fruit",
    "vintage red wine",
    "frothy cappuccino with a dusting of cinnamon",
    "refreshing mint mojito",
    "steaming hot green tea",
    "exotic mango lassi",
    "chilled lemonade with a splash of ginger",
    "smoothie bowl with berries and granola",
    "artisanal soda with cane sugar",
    "spiced chai latte",
    "freshly squeezed orange juice",
    "bubble tea with tapioca pearls",
    "iced coffee with vanilla syrup",
    "classic old-fashioned whiskey"
]

TEMPLATE_STRING_MIDDLE = ' at a '

ENVIRONMENT = [
    "chic urban café",
    "trendy rooftop bar",
    "family-owned trattoria",
    "small city bistro",
    "beachside shack",
    "elegant fine dining room",
    "cozy mountain lodge",
    "busy downtown food hall",
    "lakeside gazebo",
    "rustic countryside inn",
    "modern fast casual eatery",
    "classic diner",
    "luxurious cruise ship dining",
    "quaint village pub",
    "hipster coffee shop"
]

def save_img_from_url(url, resolution=(128,128), filename=''):

  response = requests.get(url)
  img = Image.open(BytesIO(response.content))
  img = img.resize(resolution, Image.LANCZOS)

  return save_img(img, filename)

def save_img(img, filename=''):

  if filename == '':
    filename = f'{uuid.uuid4()}.png'
  img.save(filename)

  return filename

def generate_dalle3_img(prompt="an astronaut on mars"):

  # TODO
  response = client.images.generate(
    model="dall-e-3",
    prompt=prompt,
    size="1024x1024",
    quality="standard",
    n=1,
  )
  return save_img_from_url(url = response.data[0].url)
  # END TODO

def generate_sd15_img(prompt="an astronaut on mars"):
  # TODO
  image = pipe(prompt=prompt).images[0]
  return save_img(image)
  # END TODO

def save_img_caption(occupation, race, filename, model):
    timestamp = datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    src = filename
    with open('img-captions.csv', 'a', newline='') as f:

        w = csv.writer(f)
        w.writerow([timestamp, src, occupation, race, model])

for food in FOOD:
  for envi in ENVIRONMENT:
    # TODO
    prompt = FOOD_TEMPLATE_STRING_START + food + TEMPLATE_STRING_MIDDLE + envi

    filename_dalle3 = generate_dalle3_img(prompt)
    try:
        save_img_caption(food, envi, filename_dalle3, "dalle3")
    except Exception as e:
        print("Error encountered:", e)
        print(prompt)

    filename_sd15 = generate_sd15_img(prompt)
    save_img_caption(food, envi, filename_sd15, "sd15")
    # END TODO

from diffusers import StableDiffusionPipeline
import torch
from PIL import Image
import os

model_id = "runwayml/stable-diffusion-v1-5"
pipe = StableDiffusionPipeline.from_pretrained(model_id, torch_dtype=torch.float16)
pipe = pipe.to("cuda" if torch.cuda.is_available() else "cpu")


def generate_sd_img(prompt, display_inline=True, save=True, output_dir="generated_images"):

    image = pipe(prompt).images[0]

    if display_inline:
        try:
            display(image)
        except NameError:
            image.show()

    if save:
        os.makedirs(output_dir, exist_ok=True)
        safe_filename = "".join(c if c.isalnum() or c in "_-" else "_" for c in prompt)[:50] + ".png"
        file_path = os.path.join(output_dir, safe_filename)
        image.save(file_path)
        print(f"Image saved as '{file_path}'")
        return file_path

    return None

prompt = "a maltese dog, high resolution"
generate_sd_img(prompt)